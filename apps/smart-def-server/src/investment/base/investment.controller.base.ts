/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InvestmentService } from "../investment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InvestmentCreateInput } from "./InvestmentCreateInput";
import { Investment } from "./Investment";
import { InvestmentFindManyArgs } from "./InvestmentFindManyArgs";
import { InvestmentWhereUniqueInput } from "./InvestmentWhereUniqueInput";
import { InvestmentUpdateInput } from "./InvestmentUpdateInput";
import { AnalyticsFindManyArgs } from "../../analytics/base/AnalyticsFindManyArgs";
import { Analytics } from "../../analytics/base/Analytics";
import { AnalyticsWhereUniqueInput } from "../../analytics/base/AnalyticsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InvestmentControllerBase {
  constructor(
    protected readonly service: InvestmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Investment })
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createInvestment(
    @common.Body() data: InvestmentCreateInput
  ): Promise<Investment> {
    return await this.service.createInvestment({
      data: {
        ...data,

        pool: data.pool
          ? {
              connect: data.pool,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        id: true,
        investmentDate: true,

        pool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Investment] })
  @ApiNestedQuery(InvestmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async investments(@common.Req() request: Request): Promise<Investment[]> {
    const args = plainToClass(InvestmentFindManyArgs, request.query);
    return this.service.investments({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        investmentDate: true,

        pool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Investment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async investment(
    @common.Param() params: InvestmentWhereUniqueInput
  ): Promise<Investment | null> {
    const result = await this.service.investment({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        investmentDate: true,

        pool: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Investment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateInvestment(
    @common.Param() params: InvestmentWhereUniqueInput,
    @common.Body() data: InvestmentUpdateInput
  ): Promise<Investment | null> {
    try {
      return await this.service.updateInvestment({
        where: params,
        data: {
          ...data,

          pool: data.pool
            ? {
                connect: data.pool,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          id: true,
          investmentDate: true,

          pool: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Investment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInvestment(
    @common.Param() params: InvestmentWhereUniqueInput
  ): Promise<Investment | null> {
    try {
      return await this.service.deleteInvestment({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          investmentDate: true,

          pool: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/analyticsItems")
  @ApiNestedQuery(AnalyticsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Analytics",
    action: "read",
    possession: "any",
  })
  async findAnalyticsItems(
    @common.Req() request: Request,
    @common.Param() params: InvestmentWhereUniqueInput
  ): Promise<Analytics[]> {
    const query = plainToClass(AnalyticsFindManyArgs, request.query);
    const results = await this.service.findAnalyticsItems(params.id, {
      ...query,
      select: {
        analysisDate: true,
        createdAt: true,
        id: true,

        investment: {
          select: {
            id: true,
          },
        },

        profit: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analyticsItems")
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "update",
    possession: "any",
  })
  async connectAnalyticsItems(
    @common.Param() params: InvestmentWhereUniqueInput,
    @common.Body() body: AnalyticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsItems: {
        connect: body,
      },
    };
    await this.service.updateInvestment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analyticsItems")
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "update",
    possession: "any",
  })
  async updateAnalyticsItems(
    @common.Param() params: InvestmentWhereUniqueInput,
    @common.Body() body: AnalyticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsItems: {
        set: body,
      },
    };
    await this.service.updateInvestment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analyticsItems")
  @nestAccessControl.UseRoles({
    resource: "Investment",
    action: "update",
    possession: "any",
  })
  async disconnectAnalyticsItems(
    @common.Param() params: InvestmentWhereUniqueInput,
    @common.Body() body: AnalyticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyticsItems: {
        disconnect: body,
      },
    };
    await this.service.updateInvestment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
